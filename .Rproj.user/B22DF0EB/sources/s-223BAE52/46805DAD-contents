# Generating test data
library(MASS)
tree_model_predict <- function(x, parameters){
  return(as.numeric(x %*% parameters))
}

target_model_predict <- function(X, tree){
  return(tree_model_matrix_predict(X, tree, tree_model_predict))
}
generate_ml_data <- function(n, p, q, seed = 1, target_tree = NULL, test = FALSE, target_model = "linear.model"){
  set.seed(seed)
  # eta ~ N(XB + U*gamma, Sigma)
  
  # Parameters of observation points
  intercept <- rep.int(1, n)
  
  # Cluster variables
  U <- matrix(runif(n*q),n,q)
  U <- cbind(intercept, U)
  
  # Observation X
  X <- matrix(runif(n*p),n,p)
  X <- cbind(X)
  # Target coefficients
  beta <- runif(p, min = 0.4, max = 1)
  beta <- as.matrix(beta)
  X <- cbind(X, U)

  if(is.null(target_tree)){
    # Target tree
    rule1 <- new("NumericSplitRule", col = 2+(p), split_value = 0.5)
    mod1 <- new("TerminalNode", parameters = c(beta, runif(q+1,0.5,1)), pos = 2)
    mod2params<- mod1@parameters
    mod2params[2+(p)] <- mod2params[2+(p)]*3
    mod2 <- new("TerminalNode", parameters = mod2params, pos = 3)
    root <- new("InternalNode", main = rule1, left_child = mod1@pos, right_child = mod2@pos, pos = 1)
    target_tree = list(root, mod1, mod2)
  }

  if(target_model == "liner.model"){
    target_eta <- target_model_predict(X, target_tree)
    y <- as.matrix(rpois(n, exp(target_eta)))

    if(test){
      mod1@parameters <- rep(1,5)
      mod2@parameters <- rep(1, 5)
      tree <- fisher_scoring(y, X, list(root, mod1, mod2), fisher_glm, score_glm, 1:2, DELTA = 1e-7, DELTA_TOL = 1e-8)
      # tree <- optim_tree(y, X, list(root, mod1, mod2), score_tree, loglik_tree, loglik_glm, score_glm, 1:3)
      y_hat <- exp(target_model_predict(X, tree))
      plot_tree(y, X, 4, tree)

    }

    df <- as.data.frame(X)
    df$y <- y
    target_params = list(target_tree = target_tree)
  }else if(target_model == "INLA"){
    # Assume GP want matern cov
    beta <- runif(p+1, min = 0.4, max = 1) # Now include intercept in beta
    models <- get_terminal_pos(target_tree)
    n_models <- length(models)
    theta1 <- runif(n_models,1, 2)
    theta2 <- runif(n_models, 2, 10 )

    Xs <- modelmatrix_to_submodel_matrices(X, tree)


    epsilons <- lapply(Xs, function(M){
      U <- M[,(p+2):(p+q+1)]
      res <- matrix(NA, nrow=nrow(M), ncol = nrow(M))
          for (s in (1:nrow(M))) {
            for (t in (s:nrow(M))){
              d <- sum((U[s,]-U[t,])^2)^0.5
              co <- inla.matern.cov(theta1[i], theta2[i], d)
              res[s,t] <- co
              res[t,s] <- co
            }
          }
      mu <- rep(0, nrow(M))
      draws <- MASS::mvrnorm(1, mu = mu, Sigma = res)
      return(draws)
    })


    target_etas <- lapply(1:n_models, function(i) Xs[[i]][,1:(p+1)] %*% beta + epsilons[[i]])
    target_eta <- Reduce(rbind, target_etas)
    y <- as.matrix(rpois(n, exp(target_eta)))
    X <- Reduce(rbind, Xs)

    df <- as.data.frame(X)
    df$y <- y

    target_params <- list(target_tree = target_tree, beta = beta, theta1 = theta1, theta2 = theta2)
  }
  return(list(df = df, target_params = target_params))
}


