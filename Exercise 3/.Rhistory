res
length(res)
i = 10
j = 50
num.different <- res[[i]] - res[[j]]
num.different
num.different <- res[[i]] - res[[j]]
num.different <- abs(num.different)
num.different <- sum(num.different)
num.different
#Remove burnin:
res <- res.rand$stored.ls[-(1:50)]
different.df <- c()
for(i in 1:length(res)){
for(j in 1:length(res)){
if(i == j){
next()
}
num.different <- res[[i]] - res[[j]]
num.different <- abs(num.different)
num.different <- sum(num.different)
different.df <- rbind(different.df, c(num.different, abs(i-j)))
}
}
#Remove burnin:
res <- res.rand$stored.ls[-(1:50)]
different.df <- c()
for(i in 1:length(res)){
print(i)
for(j in 1:length(res)){
if(i == j){
next()
}
num.different <- res[[i]] - res[[j]]
num.different <- abs(num.different)
num.different <- sum(num.different)
different.df <- rbind(different.df, c(num.different, abs(i-j)))
}
}
different.df
#Remove burnin:
res <- res.rand$stored.ls[-(1:50)]
different.df <- c()
for(i in 1:length(res)){
print(i)
for(j in 1:length(res)){
if(i == j){
next()
}
num.different <- res[[i]] - res[[j]]
num.different <- abs(num.different)
num.different <- sum(num.different)
different.df <- rbind(different.df, c(num.different, abs(i-j)))
}
}
#Remove burnin:
res <- res.rand$stored.ls[-(1:50)]
different.df <- c()
for(i in 1:length(res)){
print(i)
for(j in 1:length(res)){
if(i == j){
next()
}
num.different <- res[[i]] - res[[j]]
num.different <- abs(num.different)
num.different <- sum(num.different)
different.df <- rbind(different.df, c(num.different, abs(i-j)))
}
if(i %% 10 == 0){
write.table(different.df, "myDF.csv", sep = ",", col.names = !file.exists("myDF.csv"), append = T)
different.df <- c()
}
}
df <- read.csv("myDF.csv")
head(df)
head(df)
df
df
df <- read.csv("myDF.csv")
library(dplyr)
head(df)
colnames(df) <- c("index", "num.diff", "dist")
df <- df %>% group_by(dist) %>% summarise(avg.diff = mean(num.diff))
df
save(df, file = "df.RData")
ggplot(df)+ geom_line(aes(x = dist, y = avg.diff))
ggplot(df)+ geom_line(aes(x = dist, y = avg.diff)) + xlim(c(0,100))
library(ggpubr)
p2 <- ggplot(df)+ geom_line(aes(x = dist, y = avg.diff)) + xlim(c(0,100)) + theme_classic()
p1 <- ggplot(df)+ geom_line(aes(x = dist, y = avg.diff)) + theme_classic()
p2 <- ggplot(df)+ geom_line(aes(x = dist, y = avg.diff)) + xlim(c(0,100)) + theme_classic()
ggarrange(p1, p2, ncol = 2, nrow = 1)
p1 <- ggplot(df)+ geom_line(aes(x = dist, y = avg.diff)) + theme_classic() + xlab("Iteration differnce") + ylab("Average amoount of differing cells in map")
p2 <- ggplot(df)+ geom_line(aes(x = dist, y = avg.diff)) + xlim(c(0,100)) + theme_classic()
ggarrange(p1, p2, ncol = 2, nrow = 1)
p1 <- ggplot(df)+ geom_line(aes(x = dist, y = avg.diff)) + theme_classic() + xlab("Iteration differnce") + ylab("Average amoount of differing cells in map")
p2 <- ggplot(df)+ geom_line(aes(x = dist, y = avg.diff)) + xlim(c(0,100)) + theme_classic()+ xlab("Iteration differnce") + ylab("Average amoount of differing cells in map")
p2 <- ggplot(df)+ geom_line(aes(x = dist, y = avg.diff)) + xlim(c(0,100)) + theme_classic()+ xlab("Iteration differnce") + ylab("Average amoount of differing cells in map")
ggarrange(p1, p2, ncol = 2, nrow = 1)
p1 <- ggplot(df)+ geom_line(aes(x = dist, y = avg.diff)) + theme_classic() + xlab("Iteration differnce") + ylab("Average amoount of differing cells in map") + ggtitle("All iteration differences")
p2 <- ggplot(df)+ geom_line(aes(x = dist, y = avg.diff)) + xlim(c(0,100)) + theme_classic()+ xlab("Iteration differnce") + ylab("Average amoount of differing cells in map") + ggtitle("0-100 iteration difference")
ggarrange(p1, p2, ncol = 2, nrow = 1)
annotate_figure(p,
annotate_figure(p,
top = text_grob("Visualizing sample difference after n-iteartion", color = "black", face = "bold", size = 14))
annotate_figure(p,
top = text_grob("Visualizing sample difference after n-iteartion", color = "black", face = "bold", size = 14))
p1 <- ggplot(df)+ geom_line(aes(x = dist, y = avg.diff)) + theme_classic() + xlab("Iteration differnce") + ylab("Average amoount of differing cells in map") + ggtitle("All iteration differences")
p2 <- ggplot(df)+ geom_line(aes(x = dist, y = avg.diff)) + xlim(c(0,100)) + theme_classic()+ xlab("Iteration differnce") + ylab("Average amoount of differing cells in map") + ggtitle("0-100 iteration difference")
p <- ggarrange(p1, p2, ncol = 2, nrow = 1)
annotate_figure(p,
top = text_grob("Visualizing sample difference after n-iteartion", color = "black", face = "bold", size = 14))
annotate_figure(p,
top = text_grob("Visualizing sample difference after n-iteraetions", color = "black", face = "bold", size = 14))
annotate_figure(p,
top = text_grob("Visualizing sample difference after n-iterations", color = "black", face = "bold", size = 14))
p <- ggarrange(p1, p2, ncol = 2, nrow = 1)
annotate_figure(p,
top = text_grob("Visualizing sample difference after n-iterations", color = "black", face = "bold", size = 14))
p1 <- ggplot(df)+ geom_line(aes(x = dist, y = avg.diff)) + theme_classic() + xlab("Iteration differnce") + ylab("Average amount of difference cells in map") + ggtitle("All iteration differences")
p2 <- ggplot(df)+ geom_line(aes(x = dist, y = avg.diff)) + xlim(c(0,100)) + theme_classic()+ xlab("Iteration difference") + ylab("Average amount of difference cells in map") + ggtitle("0-100 iteration difference")
p <- ggarrange(p1, p2, ncol = 2, nrow = 1)
annotate_figure(p,
top = text_grob("Visualizing sample difference after n-iterations", color = "black", face = "bold", size = 14))
p1 <- ggplot(df)+ geom_line(aes(x = dist, y = avg.diff)) + theme_classic() + xlab("Iteration differnce") + ylab("Average amount of different cells in map") + ggtitle("All iteration differences")
p2 <- ggplot(df)+ geom_line(aes(x = dist, y = avg.diff)) + xlim(c(0,100)) + theme_classic()+ xlab("Iteration difference") + ylab("Average amount of different cells in map") + ggtitle("0-100 iteration difference")
p <- ggarrange(p1, p2, ncol = 2, nrow = 1)
annotate_figure(p,
top = text_grob("Visualizing sample difference after n-iterations", color = "black", face = "bold", size = 14))
1:length(res)
1:length(res)[1:length(res) %% 50 == 0]
(1:length(res))[1:length(res) %% 50 == 0]
# Keep every 50th  for independence
res <- res[(1:length(res))[1:length(res) %% 50 == 0]]
# number of independent samples:
m <- length(res)
m
P <- Reduce(sum, res)
P <- P/m
P
P <- Reduce(+, res)
P <- Reduce("+", res)
P <- P/m
P
# Chunk 1
library(ggplot2)
library(geoR)
library(fields)
library(akima)
library(ggpubr)
set.seed(123)
par()
opar <- par()
# Chunk 2
seismic <- read.csv("seismic.dat", header = F)
seismic <- as.data.frame(seismic)
names(seismic) <- c("d")
seismic$x <- 0:(nrow(seismic)-1) %/% 75 + 1
seismic$y <- 0:(nrow(seismic)-1)%% 75 + 1
complit <- read.csv("complit.dat", sep = " ")
# Chunk 3
# Figure 1
topo.li <- interp(seismic$x, seismic$y, seismic$d)
image.plot(topo.li, main = "Display of seismic data, LD", horizontal = T, legend.lab = "d")
contour(topo.li,add=T)
par(mfrow=c(1,1))
# Chunk 4
#1b
# Calculating pi-s from data.
pi <- dnorm(seismic$d, mean = 0.08, sd = 0.06)/(dnorm(seismic$d, mean = 0.02, sd = 0.06) + dnorm(seismic$d, mean = 0.08, sd = 0.06))
topo.li <- interp(seismic$x, seismic$y, pi)
image.plot(topo.li, main = "Display of probabilies, LD", horizontal = T, legend.lab = "p")
contour(topo.li,add=T)
par(mfrow=c(1,1))
# Chunk 5
par(oma = c(4, 1, 1, 1))
simulate.unif <- function(){
sapply(pi, function(p) rbinom(n = 1, size = 1, prob = p))
}
par(mfrow=c(3,2))
set.seed(1)
for(i in 1:6){
sim.res <- simulate.unif()
topo.li <- interp(seismic$x, seismic$y, sim.res)
image(topo.li, main = paste0("Simulation ", i), nlevel = 2, col = c("#F7F396", "purple"))
}
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("bottom", c("Sand", "Shale"), xpd = TRUE, horiz = TRUE, inset = c(0,
0), bty = "n", fill = c("#F7F396", "purple"), cex = 2)
par(mfrow=c(1,1))
pi
# IB MMAP expectance and variance.
ex <- pi
var <- pi*(1-pi)
MMAP <- pi >= 0.5
MMAP <- as.numeric(MMAP)
seismic <- read.csv("seismic.dat", header = F)
seismic
to.topo <- function(df){
data <- c()
for(i in 1:nrow(df)){
for(j in 1:ncol(df)){
data <- rbind(data, c(i, j, df[i,j]))
}
}
data <- as.data.frame(data)
colnames(data) <- c("x", "y", "p")
topo.li <- interp(data$x, data$y, data$l)
return(topo.li)
}
ex <- to.topo(P)
to.topo <- function(df){
data <- c()
for(i in 1:nrow(df)){
for(j in 1:ncol(df)){
data <- rbind(data, c(i, j, df[i,j]))
}
}
data <- as.data.frame(data)
colnames(data) <- c("x", "y", "p")
topo.li <- interp(data$x, data$y, data$l)
return(topo.li)
}
ex <- to.topo(P)
unlist(P)
as.vector(P)
as.vector(P)[1]
P <- P/m
P <- Reduce("+", res)
P <- P/m
P[1,1]
P[1,2]
P[1,3]
as.vector(P)[3]
df <- as.data.frame(P)
df
res <- res[(1:length(res))[1:length(res) %% 50 == 0]]
# number of independent samples:
m <- length(res)
P <- Reduce("+", res)
P <- P/m
P <- as.vector(P) # row then columns
df <- as.data.frame(P)
df
P <- as.vector(P) # row then columns
P
# Keep every 50th  for independence
res <- res[(1:length(res))[1:length(res) %% 50 == 0]]
res
#   }
#
# }
#
# df <- read.csv("myDF.csv")
# library(dplyr)
# head(df)
# colnames(df) <- c("index", "num.diff", "dist")
# df <- df %>% group_by(dist) %>% summarise(avg.diff = mean(num.diff))
# save(df, file = "df.RData")
load("df.RData")
# number of independent samples:
m <- length(res)
# Keep every 50th  for independence
res <- res[(1:length(res))[1:length(res) %% 50 == 0]]
# number of independent samples:
m <- length(res)
P <- Reduce("+", res)
P <- P/m
P <- as.vector(P) # row then columns
df <- as.data.frame(P)
df
#   }
#
# }
#
# df <- read.csv("myDF.csv")
# library(dplyr)
# head(df)
# colnames(df) <- c("index", "num.diff", "dist")
# df <- df %>% group_by(dist) %>% summarise(avg.diff = mean(num.diff))
# save(df, file = "df.RData")
load("df.RData")
p1 <- ggplot(df)+ geom_line(aes(x = dist, y = avg.diff)) + theme_classic() + xlab("Iteration differnce") + ylab("Average amount of different cells in map") + ggtitle("All iteration differences")
p2 <- ggplot(df)+ geom_line(aes(x = dist, y = avg.diff)) + xlim(c(0,100)) + theme_classic()+ xlab("Iteration difference") + ylab("Average amount of different cells in map") + ggtitle("0-100 iteration difference")
p <- ggarrange(p1, p2, ncol = 2, nrow = 1)
annotate_figure(p,
top = text_grob("Visualizing sample difference after n-iterations", color = "black", face = "bold", size = 14))
res
# Only run this if you have serious amount of time
#res.rand <- storing.gibbs.sampler(l, m, d)
#save(res.rand, file = "res_rand.RData")
load("res_rand.RData")
# set burning
burnin <- 50
# Find distance to last
par(oma = c(4, 1, 1, 1))
par(mfrow=c(1,2), mar = c(1, 1, 1, 1))
plot.map(res.rand$stored.ls[[1]], "Gibbs: Initial iteration")
plot.map(res.rand$stored.ls[[2500]], "Gibbs: Last iteration")
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("bottom", c("Sand", "Shale"), xpd = TRUE, horiz = TRUE, inset = c(0,
0), bty = "n", fill = c("#F7F396", "purple"), cex = 2)
par(opar)
#Remove burnin:
res <- res.rand$stored.ls[-(1:50)]
#   }
#
# }
#
# df <- read.csv("myDF.csv")
# library(dplyr)
# head(df)
# colnames(df) <- c("index", "num.diff", "dist")
# df <- df %>% group_by(dist) %>% summarise(avg.diff = mean(num.diff))
# save(df, file = "df.RData")
load("df.RData")
p1 <- ggplot(df)+ geom_line(aes(x = dist, y = avg.diff)) + theme_classic() + xlab("Iteration differnce") + ylab("Average amount of different cells in map") + ggtitle("All iteration differences")
p2 <- ggplot(df)+ geom_line(aes(x = dist, y = avg.diff)) + xlim(c(0,100)) + theme_classic()+ xlab("Iteration difference") + ylab("Average amount of different cells in map") + ggtitle("0-100 iteration difference")
p <- ggarrange(p1, p2, ncol = 2, nrow = 1)
annotate_figure(p,
top = text_grob("Visualizing sample difference after n-iterations", color = "black", face = "bold", size = 14))
# Keep every 50th  for independence
res <- res[(1:length(res))[1:length(res) %% 50 == 0]]
# number of independent samples:
m <- length(res)
P <- Reduce("+", res)
P <- P/m
P <- as.vector(P) # row then columns
df <- as.data.frame(P)
df
df$x <- 0:(nrow(seismic)-1) %/% 75 + 1
df$y <- 0:(nrow(seismic)-1)%% 75 + 1
df$var <- df$p*(1-df$p)
df$x <- 0:(nrow(seismic)-1) %/% 75 + 1
df$y <- 0:(nrow(seismic)-1)%% 75 + 1
df
df$p
df <- as.data.frame(P)
names(df) <- c("p")
df
head(df)
df$x <- 0:(nrow(seismic)-1) %/% 75 + 1
df$y <- 0:(nrow(seismic)-1)%% 75 + 1
df$p
df$var <- df$p*(1-df$p)
df$mmap <- df$p => 0.5
df$mmap <- df$p >= 0.5
df$mmap <- as.numeric(df$mmap)
df$mmap
# Chunk 1
library(ggplot2)
library(geoR)
library(fields)
library(akima)
library(ggpubr)
set.seed(123)
par()
opar <- par()
# Chunk 2
seismic <- read.csv("seismic.dat", header = F)
seismic <- as.data.frame(seismic)
names(seismic) <- c("d")
seismic$x <- 0:(nrow(seismic)-1) %/% 75 + 1
seismic$y <- 0:(nrow(seismic)-1)%% 75 + 1
complit <- read.csv("complit.dat", sep = " ")
# Chunk 3
# Figure 1
topo.li <- interp(seismic$x, seismic$y, seismic$d)
image.plot(topo.li, main = "Display of seismic data, LD", horizontal = T, legend.lab = "d")
contour(topo.li,add=T)
par(mfrow=c(1,1))
# Chunk 4
#1b
# Calculating pi-s from data.
pi <- dnorm(seismic$d, mean = 0.08, sd = 0.06)/(dnorm(seismic$d, mean = 0.02, sd = 0.06) + dnorm(seismic$d, mean = 0.08, sd = 0.06))
topo.li <- interp(seismic$x, seismic$y, pi)
image.plot(topo.li, main = "Display of probabilies, LD", horizontal = T, legend.lab = "p")
contour(topo.li,add=T)
par(mfrow=c(1,1))
# Chunk 5
par(oma = c(4, 1, 1, 1))
simulate.unif <- function(){
sapply(pi, function(p) rbinom(n = 1, size = 1, prob = p))
}
par(mfrow=c(3,2))
set.seed(1)
for(i in 1:6){
sim.res <- simulate.unif()
topo.li <- interp(seismic$x, seismic$y, sim.res)
image(topo.li, main = paste0("Simulation ", i), nlevel = 2, col = c("#F7F396", "purple"))
}
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("bottom", c("Sand", "Shale"), xpd = TRUE, horiz = TRUE, inset = c(0,
0), bty = "n", fill = c("#F7F396", "purple"), cex = 2)
par(mfrow=c(1,1))
# Chunk 6
# IB MMAP expectance and variance.
ex <- pi
var <- pi*(1-pi)
MMAP <- pi >= 0.5
MMAP <- as.numeric(MMAP)
par(mfrow=c(3,1))
topo.li <- interp(seismic$x, seismic$y, ex)
image.plot(topo.li, main = "Expectance, LD", horizontal = F, legend.lab = "Expectance")
contour(topo.li,add=T)
topo.li <- interp(seismic$x, seismic$y, var)
image.plot(topo.li, main = "Variance, LD", horizontal = F, legend.lab = "Variance")
contour(topo.li,add=T)
topo.li <- interp(seismic$x, seismic$y, MMAP)
image(topo.li, main = "MMAP", nlevel = 2, col = c("#F7F396", "purple"))
legend("bottom", c("Sand", "Shale"), xpd = TRUE, horiz = TRUE, inset = c(0,
0), bty = "n", fill = c("#F7F396", "purple"), cex = 2)
par(mfrow=c(1,1))
# Chunk 7
# c)
plot.map <- function(df, title = "Dc"){
data <- c()
for(i in 1:nrow(df)){
for(j in 1:ncol(df)){
data <- rbind(data, c(i, j, df[i,j]))
}
}
data <- as.data.frame(data)
colnames(data) <- c("x", "y", "l")
topo.li <- interp(data$x, data$y, data$l)
image(topo.li, main = title, nlevel = 2, col = c("#F7F396", "purple"))
}
par(oma = c(4, 1, 1, 1))
par(mfrow=c(1,1))
plot.map(complit)
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("bottom", c("Sand", "Shale"), xpd = TRUE, horiz = TRUE, inset = c(0,
0), bty = "n", fill = c("#F7F396", "purple"), cex = 2)
# Chunk 8
# Pseudo likelihood
mmpl <- function(d, beta){
res <- 0
for(i in 1:nrow(d)){
for(j in 1:ncol(d)){
li <- d[i, j]
ns <- c()
if(i != 0){
ns <- c(ns, d[i-1,j])
}
if(i != nrow(d)){
ns <- c(ns, d[i+1,j])
}
if(j != 0){
ns <- c(ns, d[i,j-1])
}
if(j != ncol(d)){
ns <- c(ns, d[i,j+1])
}
ns <- unlist(ns)
lj.eq.to.li <- sapply(ns, function(lj) li == lj)
lj.eq.to.0 <- sapply(ns, function(lj) 0 == lj)
lj.eq.to.1 <- sapply(ns, function(lj) 1 == lj)
res <- res + sum(lj.eq.to.li)*log(beta) - log(beta^(sum(lj.eq.to.0))+beta^(sum(lj.eq.to.1)))
}
}
res
}
mmpl.vec <- function(d, bs){
sapply(bs, function(b) mmpl(d = d, beta = b))
}
# Finding best estiamte using optim
opt.res <- optim(fn = function(bs) mmpl.vec(complit, bs),
par = c(3),
lower = c(1),
upper = c(Inf),
control=list(fnscale=-1),
method = "L-BFGS-B")
par(mfrow=c(3,1))
topo.li <- interp(df$x, df$y, df$p)
image.plot(topo.li, main = "Expectance, LD", horizontal = F, legend.lab = "Expectance")
contour(topo.li,add=T)
topo.li <- interp(seismic$x, seismic$y, df$var)
image.plot(topo.li, main = "Variance, LD", horizontal = F, legend.lab = "Variance")
contour(topo.li,add=T)
topo.li <- interp(seismic$x, seismic$y, df$mmap)
image(topo.li, main = "MMAP", nlevel = 2, col = c("#F7F396", "purple"))
legend("bottom", c("Sand", "Shale"), xpd = TRUE, horiz = TRUE, inset = c(0,
0), bty = "n", fill = c("#F7F396", "purple"), cex = 2)
par(mfrow=c(1,1))
par(mfrow=c(3,1), mar = c(1,1,1,1))
topo.li <- interp(df$x, df$y, df$p)
image.plot(topo.li, main = "Expectance, LD", horizontal = F, legend.lab = "Expectance")
contour(topo.li,add=T)
topo.li <- interp(seismic$x, seismic$y, df$var)
image.plot(topo.li, main = "Variance, LD", horizontal = F, legend.lab = "Variance")
contour(topo.li,add=T)
topo.li <- interp(seismic$x, seismic$y, df$mmap)
image(topo.li, main = "MMAP", nlevel = 2, col = c("#F7F396", "purple"))
legend("bottom", c("Sand", "Shale"), xpd = TRUE, horiz = TRUE, inset = c(0,
0), bty = "n", fill = c("#F7F396", "purple"), cex = 2)
par(mfrow=c(3,1), mar = c(2,2,2,2))
topo.li <- interp(df$x, df$y, df$p)
image.plot(topo.li, main = "Expectance, LD", horizontal = F, legend.lab = "Expectance")
contour(topo.li,add=T)
topo.li <- interp(seismic$x, seismic$y, df$var)
image.plot(topo.li, main = "Variance, LD", horizontal = F, legend.lab = "Variance")
contour(topo.li,add=T)
topo.li <- interp(seismic$x, seismic$y, df$mmap)
image(topo.li, main = "MMAP", nlevel = 2, col = c("#F7F396", "purple"))
legend("bottom", c("Sand", "Shale"), xpd = TRUE, horiz = TRUE, inset = c(0,
0), bty = "n", fill = c("#F7F396", "purple"), cex = 2)
par(mfrow=c(1,1))
