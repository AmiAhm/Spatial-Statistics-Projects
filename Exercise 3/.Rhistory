scale_fill_discrete(labels = c("sand", "shale")+
scale_fill_manual(breaks = levels(factor(dat$z)),
values = c("#F7F396", "purple")) +
theme_bw()+
theme(legend.title = element_blank(),panel.grid = element_blank(),axis.title = element_blank(),axis.text = element_blank(),axis.ticks = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))+
theme(aspect.ratio = 1)
)
}
ggarrange(gg[[1]],gg[[2]], gg[[3]], gg[[4]], gg[[5]], gg[[6]], nrow=2, ncol=3, common.legend = TRUE, legend = "bottom")
for(i in 1:6){
sim.res <- simulate.unif()
dat <- data.frame(x=seismic$x,y= seismic$y, z=sim.res)
gg[[i]] <-ggplot(dat, aes(x=y, y=x, fill= factor(z)))+
geom_raster() +
theme_bw()+
theme(legend.title = element_blank(),panel.grid = element_blank(),axis.title = element_blank(),axis.text = element_blank(),axis.ticks = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))+
theme(aspect.ratio = 1)+
scale_fill_discrete(labels = c("sand", "shale")+
scale_fill_manual(breaks = levels(factor(dat$z)),
values = c("#F7F396", "purple"))
)
}
ggarrange(gg[[1]],gg[[2]], gg[[3]], gg[[4]], gg[[5]], gg[[6]], nrow=2, ncol=3, common.legend = TRUE, legend = "bottom")
?scale_fill_discrete
for(i in 1:6){
sim.res <- simulate.unif()
dat <- data.frame(x=seismic$x,y= seismic$y, z=sim.res)
gg[[i]] <-ggplot(dat, aes(x=y, y=x, fill= factor(z)))+
geom_raster() +
theme_bw()+
theme(legend.title = element_blank(),panel.grid = element_blank(),axis.title = element_blank(),axis.text = element_blank(),axis.ticks = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))+
theme(aspect.ratio = 1)+
scale_fill_discrete(labels = c("sand", "shale"))+
scale_fill_manual(breaks = levels(factor(dat$z)),
values = c("#F7F396", "purple"))
}
ggarrange(gg[[1]],gg[[2]], gg[[3]], gg[[4]], gg[[5]], gg[[6]], nrow=2, ncol=3, common.legend = TRUE, legend = "bottom")
for(i in 1:6){
sim.res <- simulate.unif()
dat <- data.frame(x=seismic$x,y= seismic$y, z=sim.res)
gg[[i]] <-ggplot(dat, aes(x=y, y=x, fill= factor(z)))+
geom_raster() +
theme_bw()+
theme(legend.title = element_blank(),panel.grid = element_blank(),axis.title = element_blank(),axis.text = element_blank(),axis.ticks = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))+
theme(aspect.ratio = 1)+
scale_fill_discrete(labels = c("sand", "shale"), col=c("#F7F396", "purple"))#+
#scale_fill_manual(breaks = levels(factor(dat$z)),
#values = c("#F7F396", "purple"))
}
ggarrange(gg[[1]],gg[[2]], gg[[3]], gg[[4]], gg[[5]], gg[[6]], nrow=2, ncol=3, common.legend = TRUE, legend = "bottom")
gg[[i]] <-ggplot(dat, aes(x=y, y=x, fill= factor(z)))+
geom_raster() +
theme_bw()+
theme(legend.title = element_blank(),panel.grid = element_blank(),axis.title = element_blank(),axis.text = element_blank(),axis.ticks = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))+
theme(aspect.ratio = 1)+
scale_fill_manual(breaks = levels(factor(dat$z)),
values = c("#F7F396", "purple")) +
scale_fill_discrete(labels = c("sand", "shale"))
for(i in 1:6){
sim.res <- simulate.unif()
dat <- data.frame(x=seismic$x,y= seismic$y, z=sim.res)
gg[[i]] <-ggplot(dat, aes(x=y, y=x, fill= factor(z)))+
geom_raster() +
theme_bw()+
theme(legend.title = element_blank(),panel.grid = element_blank(),axis.title = element_blank(),axis.text = element_blank(),axis.ticks = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))+
theme(aspect.ratio = 1)+
scale_fill_manual(breaks = levels(factor(dat$z)),
values = c("#F7F396", "purple")) +
scale_fill_discrete(labels = c("sand", "shale"))
}
ggarrange(gg[[1]],gg[[2]], gg[[3]], gg[[4]], gg[[5]], gg[[6]], nrow=2, ncol=3, common.legend = TRUE, legend = "bottom")
for(i in 1:6){
sim.res <- simulate.unif()
dat <- data.frame(x=seismic$x,y= seismic$y, z=sim.res)
gg[[i]] <-ggplot(dat, aes(x=y, y=x, fill= factor(z)))+
geom_raster() +
theme_bw()+
theme(legend.title = element_blank(),panel.grid = element_blank(),axis.title = element_blank(),axis.text = element_blank(),axis.ticks = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))+
theme(aspect.ratio = 1)+
scale_fill_manual(breaks = levels(factor(dat$z)),
values = c("#F7F396", "purple"), labels=c("sand", "shale"))
}
ggarrange(gg[[1]],gg[[2]], gg[[3]], gg[[4]], gg[[5]], gg[[6]], nrow=2, ncol=3, common.legend = TRUE, legend = "bottom")
# c)
plot.map <- function(df, title = "Dc"){
data <- c()
for(i in 1:nrow(df)){
for(j in 1:ncol(df)){
data <- rbind(data, c(i, j, df[i,j]))
}
}
data <- as.data.frame(data)
colnames(data) <- c("x", "y", "l")
topo.li <- interp(data$x, data$y, data$l)
image(topo.li, main = title, nlevel = 2, col = c("#F7F396", "purple"), cex.lab=clab, cex.main = cmain, cex.axis=caxis)
}
data <- c()
for(i in 1:nrow(df)){
for(j in 1:ncol(df)){
data <- rbind(data, c(i, j, df[i,j]))
}
}
# c)
plot.map <- function(df, title = "Dc"){
data <- c()
for(i in 1:nrow(df)){
for(j in 1:ncol(df)){
data <- rbind(data, c(i, j, df[i,j]))
}
}
data <- as.data.frame(data)
colnames(data) <- c("x", "y", "l")
ggplot(data, aes(x=y, y=x, fill= factor(1)))+
geom_raster() +
theme_bw()+
theme(legend.title = element_blank(),panel.grid = element_blank(),axis.title = element_blank(),axis.text = element_blank(),axis.ticks = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))+
theme(aspect.ratio = 1)+
scale_fill_manual(breaks = levels(factor(dat$z)),
values = c("#F7F396", "purple"), labels=c("sand", "shale"))
}
plot.map(complit)
df <- complicit
df <- complit
data <- c()
for(i in 1:nrow(df)){
for(j in 1:ncol(df)){
data <- rbind(data, c(i, j, df[i,j]))
}
}
data <- as.data.frame(data)
View(data)
colnames(data) <- c("x", "y", "l")
ggplot(data, aes(x=y, y=x, fill= factor(l)))+
geom_raster() +
theme_bw()+
theme(legend.title = element_blank(),panel.grid = element_blank(),axis.title = element_blank(),axis.text = element_blank(),axis.ticks = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))+
theme(aspect.ratio = 1)+
scale_fill_manual(breaks = levels(factor(dat$z)),
values = c("#F7F396", "purple"), labels=c("sand", "shale"))
# c)
plot.map <- function(df, title = "Dc"){
data <- c()
for(i in 1:nrow(df)){
for(j in 1:ncol(df)){
data <- rbind(data, c(i, j, df[i,j]))
}
}
data <- as.data.frame(data)
colnames(data) <- c("x", "y", "l")
ggplot(data, aes(x=y, y=x, fill= factor(l)))+
geom_raster() +
theme_bw()+
theme(legend.title = element_blank(),panel.grid = element_blank(),axis.title = element_blank(),axis.text = element_blank(),axis.ticks = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))+
theme(aspect.ratio = 1)+
scale_fill_manual(breaks = levels(factor(dat$z)),
values = c("#F7F396", "purple"), labels=c("sand", "shale"))
}
plot.map(complit)
all.res$`Start value` <- all.res$l
ggplot(all.res) + geom_line(aes(x = x, y = res, color = `Start value`), size = 0.9) + theme_classic() +
ylab("Percentage with li = 1") +
xlab("Number of steps from initial") +
ggtitle("Convergence: Percentage li = 1") +
theme(text = element_text(size = 14))
# Starting with random 50-50 seems to have converged fastes, so set burnin to 50, and generate some more samples. This time storing all results
# Chunk 1: setup
knitr::opts_chunk$set( echo = FALSE,
message=FALSE,
warning=FALSE,
include=FALSE)
# Chunk 2
library(ggplot2)
library(geoR)
library(fields)
library(akima)
library(ggpubr)
set.seed(123)
par()
opar <- par()
# Chunk 3
seismic <- read.csv("seismic.dat", header = F)
seismic <- as.data.frame(seismic)
names(seismic) <- c("d")
seismic$x <- 0:(nrow(seismic)-1) %/% 75 + 1
seismic$y <- 0:(nrow(seismic)-1)%% 75 + 1
complit <- read.csv("complit.dat", sep = " ")
# Chunk 4: fig1a1
# Figure 1
ggplot(seismic, aes(x=x, y=y))+
geom_raster(aes(fill= d))+
scale_fill_viridis_c(option="plasma")+
theme_bw()+
theme(aspect.ratio = 1)+
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))+
theme(legend.title = element_blank(),panel.grid = element_blank(),axis.title = element_blank(),axis.text = element_blank(),axis.ticks = element_blank())
# Chunk 5: fig1b1
#1b
# Calculating pi-s from data.
pi <- dnorm(seismic$d, mean = 0.08, sd = 0.06)/(dnorm(seismic$d, mean = 0.02, sd = 0.06) + dnorm(seismic$d, mean = 0.08, sd = 0.06))
new_data <- data.frame(x=seismic$x, y=seismic$y, pi)
ggplot(new_data, aes(x=x, y=y))+
geom_raster(aes(fill= pi))+
scale_fill_viridis_c(option="plasma")+
theme_bw()+
theme(aspect.ratio = 1)+
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))+
theme(legend.title = element_blank(),panel.grid = element_blank(),axis.title = element_blank(),axis.text = element_blank(),axis.ticks = element_blank())
# Chunk 6: fig1b2
simulate.unif <- function(){
sapply(pi, function(p) rbinom(n = 1, size = 1, prob = p))
}
gg <- list()
set.seed(1)
for(i in 1:6){
sim.res <- simulate.unif()
dat <- data.frame(x=seismic$x,y= seismic$y, z=sim.res)
gg[[i]] <-ggplot(dat, aes(x=y, y=x, fill= factor(z)))+
geom_raster() +
theme_bw()+
theme(legend.title = element_blank(),panel.grid = element_blank(),axis.title = element_blank(),axis.text = element_blank(),axis.ticks = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))+
theme(aspect.ratio = 1)+
scale_fill_manual(breaks = levels(factor(dat$z)),
values = c("#F7F396", "purple"), labels=c("sand", "shale"))
}
ggarrange(gg[[1]],gg[[2]], gg[[3]], gg[[4]], gg[[5]], gg[[6]], nrow=2, ncol=3, common.legend = TRUE, legend = "bottom")
# Chunk 7: fig1b3
# IB MMAP expectance and variance.
ex <- pi
var <- pi*(1-pi)
MMAP <- pi >= 0.5
MMAP <- as.numeric(MMAP)
dat1 <- data.frame(x=seismic$x, y=seismic$y, z=ex)
ggg1 <- ggplot(dat1, aes(x=x, y=y))+
geom_raster(aes(fill= z))+
scale_fill_viridis_c(option="plasma")+
theme_bw()+
theme(aspect.ratio = 1)+
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))+
theme(legend.title = element_blank(),panel.grid = element_blank(),axis.title = element_blank(),axis.text = element_blank(),axis.ticks = element_blank())+
ggtitle("E(l|d)")
dat2 <- data.frame(x=seismic$x, y=seismic$y, z=var)
ggg2 <- ggplot(dat2, aes(x=x, y=y))+
geom_raster(aes(fill= z))+
scale_fill_viridis_c(option="plasma")+
theme_bw()+
theme(aspect.ratio = 1)+
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))+
theme(legend.title = element_blank(),panel.grid = element_blank(),axis.title = element_blank(),axis.text = element_blank(),axis.ticks = element_blank())+
ggtitle("Var(l|d)")
dat3 <- data.frame(x=seismic$x,y= seismic$y, z=MMAP)
ggg3 <-ggplot(dat, aes(x=y, y=x, fill= factor(z)))+
geom_raster() +
theme_bw()+
theme(legend.title = element_blank(),panel.grid = element_blank(),axis.title = element_blank(),axis.text = element_blank(),axis.ticks = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))+
theme(aspect.ratio = 1)+
scale_fill_manual(breaks = levels(factor(dat$z)),
values = c("#F7F396", "purple"), labels=c("sand", "shale"))+
ggtitle("MMAP")
ggarrange(ggg1, ggg2, ggg3, nrow=2, ncol=2)
# Chunk 8: fig1c1
# c)
plot.map <- function(df, title = "Dc"){
data <- c()
for(i in 1:nrow(df)){
for(j in 1:ncol(df)){
data <- rbind(data, c(i, j, df[i,j]))
}
}
data <- as.data.frame(data)
colnames(data) <- c("x", "y", "l")
ggplot(data, aes(x=y, y=x, fill= factor(l)))+
geom_raster() +
theme_bw()+
theme(legend.title = element_blank(),panel.grid = element_blank(),axis.title = element_blank(),axis.text = element_blank(),axis.ticks = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))+
theme(aspect.ratio = 1)+
scale_fill_manual(breaks = levels(factor(dat$z)),
values = c("#F7F396", "purple"), labels=c("sand", "shale"))
}
plot.map(complit)
# Chunk 9
# Pseudo likelihood
mmpl <- function(d, beta){
res <- 0
for(i in 1:nrow(d)){
for(j in 1:ncol(d)){
li <- d[i, j]
ns <- c()
if(i != 0){
ns <- c(ns, d[i-1,j])
}
if(i != nrow(d)){
ns <- c(ns, d[i+1,j])
}
if(j != 0){
ns <- c(ns, d[i,j-1])
}
if(j != ncol(d)){
ns <- c(ns, d[i,j+1])
}
ns <- unlist(ns)
lj.eq.to.li <- sapply(ns, function(lj) li == lj)
lj.eq.to.0 <- sapply(ns, function(lj) 0 == lj)
lj.eq.to.1 <- sapply(ns, function(lj) 1 == lj)
res <- res + sum(lj.eq.to.li)*log(beta) - log(beta^(sum(lj.eq.to.0))+beta^(sum(lj.eq.to.1)))
}
}
res
}
mmpl.vec <- function(d, bs){
sapply(bs, function(b) mmpl(d = d, beta = b))
}
# Finding best estiamte using optim
opt.res <- optim(fn = function(bs) mmpl.vec(complit, bs),
par = c(3),
lower = c(1),
upper = c(Inf),
control=list(fnscale=-1),
method = "L-BFGS-B")
# Chunk 10
# Set start beta parameter
beta <- opt.res$par
# Calcukate probability of li being 1
pl.li.1.given.ns <- function(ns, di) {
lj.eq.to.0 <- sapply(ns, function(lj) 0 == lj)
lj.eq.to.1 <- sapply(ns, function(lj) 1 == lj)
dnorm(di, mean = 0.08, sd = 0.06) *
beta^(sum(lj.eq.to.1))/
(beta^(sum(lj.eq.to.1))*dnorm(di, mean = 0.08, sd = 0.06)+
beta^(sum(lj.eq.to.0))*dnorm(di, mean = 0.02, sd = 0.06))
}
## Gibbssampler
# Sample from a cell
single.step.cell <- function(i, j, l, d){
di <- d[i, j]
li <- l[i, j]
ns <- c()
if(i != 0){
ns <- c(ns, l[i-1,j])
}
if(i != nrow(l)){
ns <- c(ns, l[i+1,j])
}
if(j != 0){
ns <- c(ns, l[i,j-1])
}
if(j != ncol(l)){
ns <- c(ns, l[i,j+1])
}
# Chance translate to 1
p <- pl.li.1.given.ns(ns, di)
li.next <- rbinom(n = 1, size = 1, prob = p)
l[i, j] <- li.next
return(l)
}
# Sweep a single time
single.step <- function(l, d){
for(i in 1:nrow(l)){
for(j in 1:ncol(l)){
i <- sample(nrow(l), size = 1)
j <- sample(ncol(l), size = 1)
l <- single.step.cell(i, j, l, d)
}
}
return(l)
}
d <- matrix(NA, nrow = 75, ncol = 75)
for(i in 1:nrow(seismic)){
d[seismic[i,]$x,seismic[i,]$y] <- seismic[i,]$d
}
m <- 250
# Sweep m times
gibbs.sampler <- function(l, m, d){
ls <- c()
for(q in 1:m){
print(q)
l <- single.step(l, d)
ls <- c(ls, sum(l))
}
list(l = l, ls = ls)
}
# # Run m steps with different initial values
# # ALl 1
# l <- matrix(1, nrow = 75, ncol = 75)
# res1 <- gibbs.sampler(l, m, d)
#
# #Store number of ls in each step, in data frame
# res <- res1$ls
# all.res <- as.data.frame(res)
# all.res$x <- 1:m
# all.res$l <- "All 1"
# # All 0
# l <- matrix(0, nrow = 75, ncol = 75)
# res0 <- gibbs.sampler(l, m, d)
# # Add number of ls in each step, in data frame
# res <- res0$ls
# temp.res <- as.data.frame(res)
# temp.res$x <- 1:m
# temp.res$l <- "All 0"
# all.res <- rbind(all.res, temp.res)
# # Random with 0.5 probabilit
# set.seed(123)
# l <- matrix(rbinom(prob = 0.5, n = 75*75, size = 1), nrow = 75, ncol = 75)
# res.rand <- gibbs.sampler(l, m, d)
# # Add number of ls in each step, in data frame
# res <- res.rand$ls
# temp.res <- as.data.frame(res)
# temp.res$x <- 1:m
# temp.res$l <- "Random matrix"
# all.res <- rbind(all.res, temp.res)
# #Save results
# save(all.res, file = "gibbsinitials.RData")
# Load results, uncomment above if you like to watch paint dry
load(file = "gibbsinitials.RData")
all.res$l <- as.factor(all.res$l)
all.res$res <- all.res$res/(75*75)
all.res$`Start value` <- all.res$l
ggplot(all.res) + geom_line(aes(x = x, y = res, color = `Start value`), size = 0.9) + theme_classic() +
ylab("Percentage with li = 1") +
xlab("Number of steps from initial") +
ggtitle("Convergence: Percentage li = 1") +
theme(text = element_text(size = 14))
# Starting with random 50-50 seems to have converged fastes, so set burnin to 50, and generate some more samples. This time storing all results
all.res$`Start value` <- all.res$l
ggplot(all.res) + geom_line(aes(x = x, y = res, color = `Start value`), size = 0.9) + theme_classic() +
ylab("Percentage with li = 1") +
xlab("Number of steps from initial") +
theme(text = element_text(size = 7))
# Starting with random 50-50 seems to have converged fastes, so set burnin to 50, and generate some more samples. This time storing all results
all.res$`Start value` <- all.res$l
ggplot(all.res) + geom_line(aes(x = x, y = res, color = `Start value`), size = 0.9) + theme_classic() +
ylab("Percentage with li = 1") +
xlab("Number of steps from initial") +
theme(text = element_text(size = 10))
# Starting with random 50-50 seems to have converged fastes, so set burnin to 50, and generate some more samples. This time storing all results
# Find distance to last
p1 <- plot.map(res.rand$stored.ls[[100]], "Gibbs: Initial iteration")
p2 <- plot.map(res.rand$stored.ls[[500]], "Gibbs: Initial iteration")
p3 <- plot.map(res.rand$stored.ls[[1000]], "Gibbs: Initial iteration")
p4 <- plot.map(res.rand$stored.ls[[1500]], "Gibbs: Initial iteration")
p5 <- plot.map(res.rand$stored.ls[[2000]], "Gibbs: Initial iteration")
p6 <- plot.map(res.rand$stored.ls[[2500]], "Gibbs: Initial iteration")
ggarrange(p1,p2,p3,p4,p5,p6, nrow=2, ncol=3)
# Find distance to last
p1 <- plot.map(res.rand$stored.ls[[100]], "Gibbs: Initial iteration")
p2 <- plot.map(res.rand$stored.ls[[500]], "Gibbs: Initial iteration")
p3 <- plot.map(res.rand$stored.ls[[1000]], "Gibbs: Initial iteration")
p4 <- plot.map(res.rand$stored.ls[[1500]], "Gibbs: Initial iteration")
p5 <- plot.map(res.rand$stored.ls[[2000]], "Gibbs: Initial iteration")
p6 <- plot.map(res.rand$stored.ls[[2500]], "Gibbs: Initial iteration")
ggarrange(p1,p2,p3,p4,p5,p6, nrow=2, ncol=3)
# Find distance to last
p1 <- plot.map(res.rand$stored.ls[[100]], "Gibbs: Initial iteration")
# Sweep m times and store
m <- 2500
storing.gibbs.sampler <- function(l, m, d){
ls <- c()
stored.ls <- list()
for(q in 1:m){
print(q)
l <- single.step(l, d)
ls <- c(ls, sum(l))
stored.ls <- c(stored.ls, list(l))
}
list(l = l, ls = ls, stored.ls = stored.ls)
}
set.seed(123)
l <- matrix(rbinom(prob = 0.5, n = 75*75, size = 1), nrow = 75, ncol = 75)
# Only run this if you have serious amounts of time
#res.rand <- storing.gibbs.sampler(l, m, d)
#save(res.rand, file = "res_rand.RData")
load("res_rand.RData")
# set burning
burnin <- 50
# Find distance to last
p1 <- plot.map(res.rand$stored.ls[[100]], "Gibbs: Initial iteration")
p2 <- plot.map(res.rand$stored.ls[[500]], "Gibbs: Initial iteration")
p3 <- plot.map(res.rand$stored.ls[[1000]], "Gibbs: Initial iteration")
p4 <- plot.map(res.rand$stored.ls[[1500]], "Gibbs: Initial iteration")
p5 <- plot.map(res.rand$stored.ls[[2000]], "Gibbs: Initial iteration")
p6 <- plot.map(res.rand$stored.ls[[2500]], "Gibbs: Initial iteration")
ggarrange(p1,p2,p3,p4,p5,p6, nrow=2, ncol=3)
ggarrange(p1,p2,p3,p4,p5,p6, nrow=2, ncol=3, common.legend = TRUE, legend = "bottom")
