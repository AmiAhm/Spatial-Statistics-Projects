p3 <- p3 + geom_line(aes(x = x, y= y,col = "blue"), data = as.data.frame(cbind(x,y)))
y <- sigma2s[2]*(1- cov.spatial(x, cov.pars=c(1, vs.matern[2]), cov.model = "matern", kappa = 2))
p3 <- p3 + geom_line(aes(x = x, y= y,col = "skyblue"), data = as.data.frame(cbind(x,y)))
p3 <- p3 + ggtitle(TeX("Matern variogram, $\\\gamma_r(\\tau)$")) + xlab(TeX("$\\tau$")) + ylab(TeX("$\\gamma_r(\\tau)$"))
p3
y <- sigma2s[1]*(1- cov.spatial(x, cov.pars=c(1, vs.matern[1]), cov.model = "matern", kappa = 2))
p3 <- ggplot() + geom_line(aes(x = x, y= y,col = "red"), data = as.data.frame(cbind(x,y)))
y <- sigma2s[1]*(1- cov.spatial(x, cov.pars=c(1, vs.matern[2]), cov.model = "matern", kappa = 2))
p3 <- p3 + geom_line(aes(x = x, y= y,col = "red"), data = as.data.frame(cbind(x,y)), linetype = "dashed")
y <- sigma2s[2]*(1- cov.spatial(x, cov.pars=c(1, vs.matern[1]), cov.model = "matern", kappa = 2))
p3 <- p3 + geom_line(aes(x = x, y= y,col = "blue"), data = as.data.frame(cbind(x,y)))
y <- sigma2s[2]*(1- cov.spatial(x, cov.pars=c(1, vs.matern[2]), cov.model = "matern", kappa = 2))
p3 <- p3 + geom_line(aes(x = x, y= y,col = "blue"), data = as.data.frame(cbind(x,y)), linetype = "dashed")
p3 <- p3 + ggtitle(TeX("Matern variogram, $\\gamma_r(\\tau)$")) + xlab(TeX("$\\tau$")) + ylab(TeX("$\\gamma_r(\\tau)$"))
p3
y <- sigma2s[1]*(1- cov.spatial(x, cov.pars=c(1, vs.matern[1]), cov.model = "matern", kappa = 2))
p3 <- ggplot() + geom_line(aes(x = x, y= y,col = "red"), data = as.data.frame(cbind(x,y)))
y <- sigma2s[1]*(1- cov.spatial(x, cov.pars=c(1, vs.matern[2]), cov.model = "matern", kappa = 2))
p3 <- p3 + geom_line(aes(x = x, y= y,col = "red"), data = as.data.frame(cbind(x,y)), linetype = "dashed")
y <- sigma2s[2]*(1- cov.spatial(x, cov.pars=c(1, vs.matern[1]), cov.model = "matern", kappa = 2))
p3 <- p3 + geom_line(aes(x = x, y= y,col = "blue"), data = as.data.frame(cbind(x,y)))
y <- sigma2s[2]*(1- cov.spatial(x, cov.pars=c(1, vs.matern[2]), cov.model = "matern", kappa = 2))
p3 <- p3 + geom_line(aes(x = x, y= y,col = "blue"), data = as.data.frame(cbind(x,y)), linetype = "dashed")
p3 <- p3 + ggtitle(TeX("Matern variogram, $\\gamma_r(\\tau)$")) + xlab(TeX("$\\tau$")) + ylab(TeX("$\\gamma_r(\\tau)$")) +
scale_color_discrete("",labels = unname(TeX(c(paste("$\\nu =$", vs.matern[1], ", $\\sigma^2 =$",sigma2s[1])
,paste("$\\nu =$", vs.matern[2], ", $\\sigma^2 =$",sigma2s[1])
,paste("$\\nu =$", vs.matern[1], ", $\\sigma^2 =$",sigma2s[2])
,paste("$\\nu =$", vs.matern[2], ", $\\sigma^2 =$",sigma2s[2])))),
guide = guide_legend(label.hjust = 0.1)) +
theme_classic() +
theme(legend.key.size = unit(1.5, 'lines'),
legend.position = 'right',
text = element_text(size=20),
legend.title = element_blank(),
legend.spacing.y = unit(0, "mm"))
p3
y <- sigma2s[1]*(1- cov.spatial(x, cov.pars=c(1, vs.exponential[1]), cov.model = "exponential", kappa = 2))
p4 <- ggplot() + geom_line(aes(x = x, y= y,col = "red"), data = as.data.frame(cbind(x,y)))
y <- sigma2s[1]*(1- cov.spatial(x, cov.pars=c(1, vs.exponential[2]), cov.model = "exponential", kappa = 2))
p4 <- p4 + geom_line(aes(x = x, y= y,col = "red"), data = as.data.frame(cbind(x,y)), linetype = "dashed")
y <- sigma2s[2]*(1- cov.spatial(x, cov.pars=c(1, vs.exponential[1]), cov.model = "exponential", kappa = 2))
p4 <- p4 + geom_line(aes(x = x, y= y,col = "blue"), data = as.data.frame(cbind(x,y)))
y <- sigma2s[2]*(1- cov.spatial(x, cov.pars=c(1, vs.exponential[2]), cov.model = "exponential", kappa = 2))
p4 <- p4 + geom_line(aes(x = x, y= y,col = "blue"), data = as.data.frame(cbind(x,y)), linetype = "dashed")
p4 <- p4 + ggtitle(TeX("Powered exponential variogram, $\\gamma_r(\\tau)$")) + xlab(TeX("$\\tau$")) + ylab(TeX("$\\gamma_r(\\tau)$")) +
scale_color_discrete("",labels = unname(TeX(c(paste("$\\nu =$", vs.exponential[1], ", $\\sigma^2 =$",sigma2s[1])
,paste("$\\nu =$", vs.exponential[2], ", $\\sigma^2 =$",sigma2s[1])
,paste("$\\nu =$", vs.exponential[1], ", $\\sigma^2 =$",sigma2s[2])
,paste("$\\nu =$", vs.exponential[2], ", $\\sigma^2 =$",sigma2s[2])))),
guide = guide_legend(label.hjust = 0.1)) +
theme_classic() +
theme(legend.key.size = unit(1.5, 'lines'),
legend.position = 'right',
text = element_text(size=20),
legend.title = element_blank(),
legend.spacing.y = unit(0, "mm"))
p4
xx
xx
n.realizations <- function(n, xx, sigma2, phi, cov.model, kappa = 2, title = "title"){
# Create covariance matrix
cov.matrix = cov.matr(xx, xx, sigma2, phi, cov.model, kappa)
# Expected value
mu = rep(0, length(xx))
# Draw from multivariate normal
draw <- MASS::mvrnorm(n = n, mu = mu, Sigma = cov.matrix)
# Transform the data
draw <- t(draw)
draw <- cbind(xx, draw)
observations <- Reduce(rbind, lapply(2:ncol(draw), function(col) cbind(draw[,c(1, col)], col)))
observations <- as.data.frame(observations)
colnames(observations) <- c("x", "observed_value", "trial")
observations$trial <- as.factor(observations$trial)
# Plot the data
pl <- ggplot()
pl + geom_line(data = observations, aes(x = x, y = observed_value, color = trial)) + ggtitle(Tex(paste(title, "$\\nu =$", phi, ", $\\sigma^2 =$",sigma2)))
pl
}
n <- 4
p1 <- n.realizations(n, xx, sigma2s[1], vs.matern[1], cov.model = "matern", kappa = 2, title = "Matern realizations")
n.realizations <- function(n, xx, sigma2, phi, cov.model, kappa = 2, title = "title"){
# Create covariance matrix
cov.matrix = cov.matr(xx, xx, sigma2, phi, cov.model, kappa)
# Expected value
mu = rep(0, length(xx))
# Draw from multivariate normal
draw <- MASS::mvrnorm(n = n, mu = mu, Sigma = cov.matrix)
# Transform the data
draw <- t(draw)
draw <- cbind(xx, draw)
observations <- Reduce(rbind, lapply(2:ncol(draw), function(col) cbind(draw[,c(1, col)], col)))
observations <- as.data.frame(observations)
colnames(observations) <- c("x", "observed_value", "trial")
observations$trial <- as.factor(observations$trial)
# Plot the data
pl <- ggplot()
pl + geom_line(data = observations, aes(x = x, y = observed_value, color = trial)) + ggtitle(TeX(paste(title, "$\\nu =$", phi, ", $\\sigma^2 =$",sigma2)))
pl
}
n <- 4
p1 <- n.realizations(n, xx, sigma2s[1], vs.matern[1], cov.model = "matern", kappa = 2, title = "Matern realizations")
p1 <- n.realizations(n, xx, sigma2s[1], vs.matern[1], cov.model = "matern", kappa = 2, title = "Matern realizations")
p1
n.realizations <- function(n, xx, sigma2, phi, cov.model, kappa = 2, title = "title"){
# Create covariance matrix
cov.matrix = cov.matr(xx, xx, sigma2, phi, cov.model, kappa)
# Expected value
mu = rep(0, length(xx))
# Draw from multivariate normal
draw <- MASS::mvrnorm(n = n, mu = mu, Sigma = cov.matrix)
# Transform the data
draw <- t(draw)
draw <- cbind(xx, draw)
observations <- Reduce(rbind, lapply(2:ncol(draw), function(col) cbind(draw[,c(1, col)], col)))
observations <- as.data.frame(observations)
colnames(observations) <- c("x", "observed_value", "trial")
observations$trial <- as.factor(observations$trial)
# Plot the data
pl <- ggplot()
pl <- pl + geom_line(data = observations, aes(x = x, y = observed_value, color = trial)) + ggtitle(TeX(paste(title, "$\\nu =$", phi, ", $\\sigma^2 =$",sigma2)))
pl
}
n <- 4
p1 <- n.realizations(n, xx, sigma2s[1], vs.matern[1], cov.model = "matern", kappa = 2, title = "Matern realizations")
p1
n.realizations <- function(n, xx, sigma2, phi, cov.model, kappa = 2, title = "title"){
# Create covariance matrix
cov.matrix = cov.matr(xx, xx, sigma2, phi, cov.model, kappa)
# Expected value
mu = rep(0, length(xx))
# Draw from multivariate normal
draw <- MASS::mvrnorm(n = n, mu = mu, Sigma = cov.matrix)
# Transform the data
draw <- t(draw)
draw <- cbind(xx, draw)
observations <- Reduce(rbind, lapply(2:ncol(draw), function(col) cbind(draw[,c(1, col)], col)))
observations <- as.data.frame(observations)
colnames(observations) <- c("x", "observed_value", "trial")
observations$trial <- as.factor(observations$trial)
# Plot the data
pl <- ggplot()
pl <- pl + geom_line(data = observations, aes(x = x, y = observed_value, color = trial)) + ggtitle(TeX(paste(title, "$\\nu =$", phi, ", $\\sigma^2 =$",sigma2)))
pl
}
n <- 4
p1 <- n.realizations(n, xx, sigma2s[1], vs.matern[1], cov.model = "matern", kappa = 2, title = "Matern realizations, with:")
p2 <- n.realizations(n, xx, sigma2s[1], vs.matern[2], cov.model = "matern", kappa = 2, title = "Matern realizations, with:")
p3 <- n.realizations(n, xx, sigma2s[2], vs.matern[1], cov.model = "matern", kappa = 2, title = "Matern realizations, with:")
p4 <- n.realizations(n, xx, sigma2s[2], vs.matern[2], cov.model = "matern", kappa = 2, title = "Matern realizations, with:")
p5 <- n.realizations(n, xx, sigma2s[1], vs.exponential[1], cov.model = "exponential", kappa = 2, title = "Powered exponential realizations, with:")
p6 <- n.realizations(n, xx, sigma2s[1], vs.exponential[2], cov.model = "exponential", kappa = 2, title = "Powered exponential, with:")
p7 <- n.realizations(n, xx, sigma2s[2], vs.exponential[1], cov.model = "exponential", kappa = 2, title = "Powered exponential, with:")
p8 <- n.realizations(n, xx, sigma2s[2], vs.exponential[2], cov.model = "exponential", kappa = 2, title = "Powered exponential, with:")
?ggarrange
?ggarrange
library(ggpubr)
ggarrange(p1,p2, p3, p4, p5, p6, p7, p8, ncol=2, widths = c(1,1), heights = c(1,1))
ggarrange(p1,p2, p3, p4, p5, p6, p7, p8, ncol=2, widths = c(1,1), heights = c(1,1), nrow = 4)
ggarrange(p1,p2, p3, p4, p5, p6, p7, p8, ncol=2, widths = c(1,1), heights = c(1,1), nrow = 4, label.x = c("a)", "b)", "c)", "d)", "e)","f)", "g)", "h)"))
p1 <- n.realizations(n, xx, sigma2s[1], vs.matern[1], cov.model = "matern", kappa = 2, title = "a) Matern realizations, with:")
p2 <- n.realizations(n, xx, sigma2s[1], vs.matern[2], cov.model = "matern", kappa = 2, title = "b) Matern realizations, with:")
p3 <- n.realizations(n, xx, sigma2s[2], vs.matern[1], cov.model = "matern", kappa = 2, title = "c) Matern realizations, with:")
p4 <- n.realizations(n, xx, sigma2s[2], vs.matern[2], cov.model = "matern", kappa = 2, title = "d) Matern realizations, with:")
p5 <- n.realizations(n, xx, sigma2s[1], vs.exponential[1], cov.model = "exponential", kappa = 2, title = "e) Powered exponential realizations, with:")
p6 <- n.realizations(n, xx, sigma2s[1], vs.exponential[2], cov.model = "exponential", kappa = 2, title = "f) Powered exponential, with:")
p7 <- n.realizations(n, xx, sigma2s[2], vs.exponential[1], cov.model = "exponential", kappa = 2, title = "g) Powered exponential, with:")
p8 <- n.realizations(n, xx, sigma2s[2], vs.exponential[2], cov.model = "exponential", kappa = 2, title = "h) Powered exponential, with:")
ggarrange(p1,p2, p3, p4, p5, p6, p7, p8, ncol=2, widths = c(1,1), heights = c(1,1), nrow = 4, label.x = c("a)", "b)", "c)", "d)", "e)","f)", "g)", "h)"))
ggarrange(p1,p2, p3, p4, p5, p6, p7, p8, ncol=2, widths = c(1,1), heights = c(1,1), nrow = 4)
# c)
head(complit)
# c)
head(complit)
setwd("~/GitHub/Spatial-Statistics-Project1/Exercise 3")
# Chunk 1
library(ggplot2)
library(geoR)
# Chunk 2
seismic <- read.csv("seismic.dat", header = F)
seismic <- as.data.frame(seismic)
names(seismic) <- c("d")
seismic$x <- 0:(nrow(seismic)-1) %/% 75 + 1
seismic$y <- 0:(nrow(seismic)-1)%% 75 + 1
complit <- read.csv("complit.dat")
# Chunk 3
# Figure 1
topo.li <- interp(seismic$x, seismic$y, seismic$d)
image.plot(topo.li, main = "Display of seismic data, LD", horizontal = T, legend.lab = "d")
contour(topo.li,add=T)
# Chunk 4
#1b
# Calculating pi-s from data.
pi <- dnorm(seismic$d, mean = 0.08, sd = 0.06)/(dnorm(seismic$d, mean = 0.02, sd = 0.06) + dnorm(seismic$d, mean = 0.08, sd = 0.06))
topo.li <- interp(seismic$x, seismic$y, pi)
image.plot(topo.li, main = "Display of probabilies, LD", horizontal = T, legend.lab = "p")
contour(topo.li,add=T)
# Chunk 5
par(oma = c(4, 1, 1, 1))
simulate.unif <- function(){
sapply(pi, function(p) rbinom(n = 1, size = 1, prob = p))
}
par(mfrow=c(3,2))
set.seed(1)
for(i in 1:6){
sim.res <- simulate.unif()
topo.li <- interp(seismic$x, seismic$y, sim.res)
image(topo.li, main = paste0("Simulation ", i), nlevel = 2, col = c("#F7F396", "purple"))
}
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("bottom", c("Sand", "Shale"), xpd = TRUE, horiz = TRUE, inset = c(0,
0), bty = "n", fill = c("#F7F396", "purple"), cex = 2)
# Chunk 6
# IB MMAP expectance and variance.
ex <- pi
var <- pi*(1-pi)
MMAP <- pi >= 0.5
MMAP <- as.numeric(MMAP)
par(mfrow=c(3,1))
topo.li <- interp(seismic$x, seismic$y, ex)
image.plot(topo.li, main = "Expectance, LD", horizontal = F, legend.lab = "Expectance")
contour(topo.li,add=T)
topo.li <- interp(seismic$x, seismic$y, var)
image.plot(topo.li, main = "Variance, LD", horizontal = F, legend.lab = "Variance")
contour(topo.li,add=T)
topo.li <- interp(seismic$x, seismic$y, MMAP)
image(topo.li, main = "MMAP", nlevel = 2, col = c("#F7F396", "purple"))
legend("bottom", c("Sand", "Shale"), xpd = TRUE, horiz = TRUE, inset = c(0,
0), bty = "n", fill = c("#F7F396", "purple"), cex = 2)
setwd("~/GitHub/Spatial-Statistics-Project1/Exercise 3")
# Chunk 1
library(ggplot2)
library(geoR)
# Chunk 2
seismic <- read.csv("seismic.dat", header = F)
seismic <- as.data.frame(seismic)
names(seismic) <- c("d")
seismic$x <- 0:(nrow(seismic)-1) %/% 75 + 1
seismic$y <- 0:(nrow(seismic)-1)%% 75 + 1
complit <- read.csv("complit.dat")
# Chunk 3
# Figure 1
topo.li <- interp(seismic$x, seismic$y, seismic$d)
image.plot(topo.li, main = "Display of seismic data, LD", horizontal = T, legend.lab = "d")
contour(topo.li,add=T)
# Chunk 4
#1b
# Calculating pi-s from data.
pi <- dnorm(seismic$d, mean = 0.08, sd = 0.06)/(dnorm(seismic$d, mean = 0.02, sd = 0.06) + dnorm(seismic$d, mean = 0.08, sd = 0.06))
topo.li <- interp(seismic$x, seismic$y, pi)
image.plot(topo.li, main = "Display of probabilies, LD", horizontal = T, legend.lab = "p")
contour(topo.li,add=T)
# Chunk 5
par(oma = c(4, 1, 1, 1))
simulate.unif <- function(){
sapply(pi, function(p) rbinom(n = 1, size = 1, prob = p))
}
par(mfrow=c(3,2))
set.seed(1)
for(i in 1:6){
sim.res <- simulate.unif()
topo.li <- interp(seismic$x, seismic$y, sim.res)
image(topo.li, main = paste0("Simulation ", i), nlevel = 2, col = c("#F7F396", "purple"))
}
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("bottom", c("Sand", "Shale"), xpd = TRUE, horiz = TRUE, inset = c(0,
0), bty = "n", fill = c("#F7F396", "purple"), cex = 2)
# Chunk 6
# IB MMAP expectance and variance.
ex <- pi
var <- pi*(1-pi)
MMAP <- pi >= 0.5
MMAP <- as.numeric(MMAP)
par(mfrow=c(3,1))
topo.li <- interp(seismic$x, seismic$y, ex)
image.plot(topo.li, main = "Expectance, LD", horizontal = F, legend.lab = "Expectance")
contour(topo.li,add=T)
topo.li <- interp(seismic$x, seismic$y, var)
image.plot(topo.li, main = "Variance, LD", horizontal = F, legend.lab = "Variance")
contour(topo.li,add=T)
topo.li <- interp(seismic$x, seismic$y, MMAP)
image(topo.li, main = "MMAP", nlevel = 2, col = c("#F7F396", "purple"))
legend("bottom", c("Sand", "Shale"), xpd = TRUE, horiz = TRUE, inset = c(0,
0), bty = "n", fill = c("#F7F396", "purple"), cex = 2)
library(ggplot2)
library(geoR)
seismic <- read.csv("seismic.dat", header = F)
seismic <- as.data.frame(seismic)
names(seismic) <- c("d")
seismic$x <- 0:(nrow(seismic)-1) %/% 75 + 1
seismic$y <- 0:(nrow(seismic)-1)%% 75 + 1
complit <- read.csv("complit.dat")
# Figure 1
topo.li <- interp(seismic$x, seismic$y, seismic$d)
library(fields)
seismic <- read.csv("seismic.dat", header = F)
seismic <- as.data.frame(seismic)
names(seismic) <- c("d")
seismic$x <- 0:(nrow(seismic)-1) %/% 75 + 1
seismic$y <- 0:(nrow(seismic)-1)%% 75 + 1
complit <- read.csv("complit.dat")
# Figure 1
topo.li <- interp(seismic$x, seismic$y, seismic$d)
?interp
library(akima)
seismic <- read.csv("seismic.dat", header = F)
seismic <- as.data.frame(seismic)
names(seismic) <- c("d")
seismic$x <- 0:(nrow(seismic)-1) %/% 75 + 1
seismic$y <- 0:(nrow(seismic)-1)%% 75 + 1
complit <- read.csv("complit.dat")
# Figure 1
topo.li <- interp(seismic$x, seismic$y, seismic$d)
image.plot(topo.li, main = "Display of seismic data, LD", horizontal = T, legend.lab = "d")
contour(topo.li,add=T)
```{r}
#1b
# Calculating pi-s from data.
pi <- dnorm(seismic$d, mean = 0.08, sd = 0.06)/(dnorm(seismic$d, mean = 0.02, sd = 0.06) + dnorm(seismic$d, mean = 0.08, sd = 0.06))
topo.li <- interp(seismic$x, seismic$y, pi)
image.plot(topo.li, main = "Display of probabilies, LD", horizontal = T, legend.lab = "p")
contour(topo.li,add=T)
```{r}
par(oma = c(4, 1, 1, 1))
# Chunk 1
library(ggplot2)
library(geoR)
library(fields)
library(akima)
# Chunk 2
seismic <- read.csv("seismic.dat", header = F)
seismic <- as.data.frame(seismic)
names(seismic) <- c("d")
seismic$x <- 0:(nrow(seismic)-1) %/% 75 + 1
seismic$y <- 0:(nrow(seismic)-1)%% 75 + 1
complit <- read.csv("complit.dat")
# Chunk 3
# Figure 1
topo.li <- interp(seismic$x, seismic$y, seismic$d)
image.plot(topo.li, main = "Display of seismic data, LD", horizontal = T, legend.lab = "d")
contour(topo.li,add=T)
# Chunk 4
#1b
# Calculating pi-s from data.
pi <- dnorm(seismic$d, mean = 0.08, sd = 0.06)/(dnorm(seismic$d, mean = 0.02, sd = 0.06) + dnorm(seismic$d, mean = 0.08, sd = 0.06))
topo.li <- interp(seismic$x, seismic$y, pi)
image.plot(topo.li, main = "Display of probabilies, LD", horizontal = T, legend.lab = "p")
contour(topo.li,add=T)
# Chunk 5
par(oma = c(4, 1, 1, 1))
simulate.unif <- function(){
sapply(pi, function(p) rbinom(n = 1, size = 1, prob = p))
}
par(mfrow=c(3,2))
set.seed(1)
for(i in 1:6){
sim.res <- simulate.unif()
topo.li <- interp(seismic$x, seismic$y, sim.res)
image(topo.li, main = paste0("Simulation ", i), nlevel = 2, col = c("#F7F396", "purple"))
}
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("bottom", c("Sand", "Shale"), xpd = TRUE, horiz = TRUE, inset = c(0,
0), bty = "n", fill = c("#F7F396", "purple"), cex = 2)
# Chunk 6
# IB MMAP expectance and variance.
ex <- pi
var <- pi*(1-pi)
MMAP <- pi >= 0.5
MMAP <- as.numeric(MMAP)
par(mfrow=c(3,1))
topo.li <- interp(seismic$x, seismic$y, ex)
image.plot(topo.li, main = "Expectance, LD", horizontal = F, legend.lab = "Expectance")
contour(topo.li,add=T)
topo.li <- interp(seismic$x, seismic$y, var)
image.plot(topo.li, main = "Variance, LD", horizontal = F, legend.lab = "Variance")
contour(topo.li,add=T)
topo.li <- interp(seismic$x, seismic$y, MMAP)
image(topo.li, main = "MMAP", nlevel = 2, col = c("#F7F396", "purple"))
legend("bottom", c("Sand", "Shale"), xpd = TRUE, horiz = TRUE, inset = c(0,
0), bty = "n", fill = c("#F7F396", "purple"), cex = 2)
# Chunk 1
library(ggplot2)
library(geoR)
library(fields)
library(akima)
# Chunk 2
seismic <- read.csv("seismic.dat", header = F)
seismic <- as.data.frame(seismic)
names(seismic) <- c("d")
seismic$x <- 0:(nrow(seismic)-1) %/% 75 + 1
seismic$y <- 0:(nrow(seismic)-1)%% 75 + 1
complit <- read.csv("complit.dat")
# Chunk 3
# Figure 1
topo.li <- interp(seismic$x, seismic$y, seismic$d)
image.plot(topo.li, main = "Display of seismic data, LD", horizontal = T, legend.lab = "d")
contour(topo.li,add=T)
par(mfrow=c(1,1))
# Chunk 4
#1b
# Calculating pi-s from data.
pi <- dnorm(seismic$d, mean = 0.08, sd = 0.06)/(dnorm(seismic$d, mean = 0.02, sd = 0.06) + dnorm(seismic$d, mean = 0.08, sd = 0.06))
topo.li <- interp(seismic$x, seismic$y, pi)
image.plot(topo.li, main = "Display of probabilies, LD", horizontal = T, legend.lab = "p")
contour(topo.li,add=T)
par(mfrow=c(1,1))
# Chunk 5
par(oma = c(4, 1, 1, 1))
simulate.unif <- function(){
sapply(pi, function(p) rbinom(n = 1, size = 1, prob = p))
}
par(mfrow=c(3,2))
set.seed(1)
for(i in 1:6){
sim.res <- simulate.unif()
topo.li <- interp(seismic$x, seismic$y, sim.res)
image(topo.li, main = paste0("Simulation ", i), nlevel = 2, col = c("#F7F396", "purple"))
}
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("bottom", c("Sand", "Shale"), xpd = TRUE, horiz = TRUE, inset = c(0,
0), bty = "n", fill = c("#F7F396", "purple"), cex = 2)
par(mfrow=c(1,1))
# Chunk 6
# IB MMAP expectance and variance.
ex <- pi
var <- pi*(1-pi)
MMAP <- pi >= 0.5
MMAP <- as.numeric(MMAP)
par(mfrow=c(3,1))
topo.li <- interp(seismic$x, seismic$y, ex)
image.plot(topo.li, main = "Expectance, LD", horizontal = F, legend.lab = "Expectance")
contour(topo.li,add=T)
topo.li <- interp(seismic$x, seismic$y, var)
image.plot(topo.li, main = "Variance, LD", horizontal = F, legend.lab = "Variance")
contour(topo.li,add=T)
topo.li <- interp(seismic$x, seismic$y, MMAP)
image(topo.li, main = "MMAP", nlevel = 2, col = c("#F7F396", "purple"))
legend("bottom", c("Sand", "Shale"), xpd = TRUE, horiz = TRUE, inset = c(0,
0), bty = "n", fill = c("#F7F396", "purple"), cex = 2)
par(mfrow=c(1,1))
# c)
head(complit)
1:nrow(complit)
# c)
head(complit)
data <- c()
for(i in 1:nrow(complit)){
for(j in 1:ncol(complit)){
data <- rbind(data, c(i, j, complit[i,j]))
}
}
data <- as.data.frame(data)
colnames(data) <- c("x", "y", "l")
data
complit[i,j]
complit[i,j]
complit[i,j]
complit <- as.matrix(complit)
data <- c()
complit <- as.matrix(complit)
for(i in 1:nrow(complit)){
for(j in 1:ncol(complit)){
data <- rbind(data, c(i, j, complit[i,j]))
}
}
data <- as.data.frame(data)
colnames(data) <- c("x", "y", "l")
complit
complit <- read.csv("complit.dat")
View(complit)
nrow(complit)
i = 1
row <- complit[i,]
row <- strsplit(row, " ")
as.numeric(row)
as.numeric(row)
row <- complit[i,]
complit <- read.csv("complit.dat", sep = " ")
complit
# c)
head(complit)
data <- c()
for(i in 1:nrow(complit)){
for(j in 1:ncol(complit)){
data <- rbind(data, c(i, j, complit[i,j]))
}
}
data <- as.data.frame(data)
colnames(data) <- c("x", "y", "l")
complit
colnames(data) <- c("x", "y", "l")
data
topo.li <- interp(data$x, data$y, data$l)
image.plot(topo.li, main = "Expectance, LD", horizontal = F, legend.lab = "Expectance")
image.plot(topo.li, main = "Expectance, LD", horizontal = F, legend.lab = "Expectance", nlevels = 2)
topo.li <- interp(data$x, data$y, data$l)
image(topo.li, main = "MMAP", nlevel = 2, col = c("#F7F396", "purple"))
legend("bottom", c("Sand", "Shale"), xpd = TRUE, horiz = TRUE, inset = c(0,
0), bty = "n", fill = c("#F7F396", "purple"), cex = 2)
topo.li <- interp(data$x, data$y, data$l)
image(topo.li, main = "MMAP", nlevel = 2, col = c("#F7F396", "purple"))
legend("bottom", c("Sand", "Shale"), xpd = TRUE, horiz = TRUE, inset = c(0,
0), bty = "n", fill = c("#F7F396", "purple"), cex = 2)
image(topo.li, main = "LD", nlevel = 2, col = c("#F7F396", "purple"))
legend("bottom", c("Sand", "Shale"), xpd = TRUE, horiz = TRUE, inset = c(0,
0), bty = "n", fill = c("#F7F396", "purple"), cex = 2)
image(topo.li, main = "Dc", nlevel = 2, col = c("#F7F396", "purple"))
legend("bottom", c("Sand", "Shale"), xpd = TRUE, horiz = TRUE, inset = c(0,
0), bty = "n", fill = c("#F7F396", "purple"), cex = 2)
